const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const ti = require('technicalindicators');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '7955550632:AAGrNgJRVbnIWsckCkcyZglo-lxvooWT3Wg';
const API_KEY = 'a9db6b712c1a40299e39d7266af5b2b3';
const CHAT_ID = '5214859281';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let marketData = [];
let fibLevels = {};
let supportResistanceLevels = [];
let lastAnalysisTime = 0;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –¥–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
const userSettings = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserSettings(chatId) {
    if (!userSettings[chatId]) {
        userSettings[chatId] = {
            symbol: 'BTCUSDT',
            interval: '15m'
        };
    }
    return userSettings[chatId];
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'],
            ['üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã', 'üìâ –£—Ä–æ–≤–Ω–∏'],
            ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ],
        resize_keyboard: true
    }
};

const intervalKeyboard = {
    reply_markup: {
        keyboard: [
            ['15m', '1h', '4h'],
            ['1d', '–ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true
    }
};

const symbolKeyboard = {
    reply_markup: {
        keyboard: [
            ['BTCUSDT', 'ETHUSDT'],
            ['BNBUSDT', 'SOLUSDT'],
            ['–ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true
    }
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function fetchMarketData(symbol = 'BTCUSDT', interval = '15m', limit = 100) {
    try {
        const response = await axios.get(`https://api.binance.com/api/v3/klines`, {
            params: {
                symbol: symbol,
                interval: interval,
                limit: limit
            }
        });
        marketData = response.data.map(item => ({
            time: item[0],
            open: parseFloat(item[1]),
            high: parseFloat(item[2]),
            low: parseFloat(item[3]),
            close: parseFloat(item[4]),
            volume: parseFloat(item[5])
        }));

        return marketData;
    } catch (error) {
        sendError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        return null;
    }
}

function calculateFibonacciLevels() {
    if (marketData.length < 2) return null;

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞ –ø–µ—Ä–∏–æ–¥
    const highs = marketData.map(item => item.high);
    const lows = marketData.map(item => item.low);
    const highestHigh = Math.max(...highs);
    const lowestLow = Math.min(...lows);

    // –¢–æ—á–∫–∏ –§–∏–±–æ–Ω–∞—á—á–∏
    fibLevels = {
        point0: highestHigh,
        point100: lowestLow,
        level236: highestHigh - (highestHigh - lowestLow) * 0.236,
        level382: highestHigh - (highestHigh - lowestLow) * 0.382,
        level500: highestHigh - (highestHigh - lowestLow) * 0.5,
        level618: highestHigh - (highestHigh - lowestLow) * 0.618,
        level786: highestHigh - (highestHigh - lowestLow) * 0.786,
        level1000: lowestLow
    };

    return fibLevels;
}

function calculateSupportResistance() {
    if (marketData.length < 20) return null;

    supportResistanceLevels = [];
    const sensitivity = 2;

    // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
    for (let i = sensitivity; i < marketData.length - sensitivity; i++) {
        const windowHigh = marketData.slice(i - sensitivity, i + sensitivity + 1).map(item => item.high);
        const windowLow = marketData.slice(i - sensitivity, i + sensitivity + 1).map(item => item.low);

        const currentHigh = marketData[i].high;
        const currentLow = marketData[i].low;

        if (currentHigh === Math.max(...windowHigh)) {
            supportResistanceLevels.push({
                value: currentHigh,
                type: 'resistance',
                time: marketData[i].time
            });
        }

        if (currentLow === Math.min(...windowLow)) {
            supportResistanceLevels.push({
                value: currentLow,
                type: 'support',
                time: marketData[i].time
            });
        }
    }

    supportResistanceLevels = supportResistanceLevels
        .filter((level, index, self) =>
            index === self.findIndex(l => Math.abs(l.value - level.value) < level.value * 0.001)
        )
        .sort((a, b) => a.value - b.value);

    return supportResistanceLevels;
}

function calculateIndicators() {
    const closes = marketData.map(item => item.close);
    const highs = marketData.map(item => item.high);
    const lows = marketData.map(item => item.low);

    // RSI
    const rsiInput = {
        values: closes,
        period: 14
    };
    const rsi = ti.RSI.calculate(rsiInput);
    const lastRsi = rsi[rsi.length - 1];

    // MACD
    const macdInput = {
        values: closes,
        fastPeriod: 12,
        slowPeriod: 26,
        signalPeriod: 9,
        SimpleMAOscillator: false,
        SimpleMASignal: false
    };
    const macd = ti.MACD.calculate(macdInput);
    const lastMacd = macd[macd.length - 1];

    // Bollinger Bands
    const bbInput = {
        values: closes,
        period: 20,
        stdDev: 2
    };
    const bb = ti.BollingerBands.calculate(bbInput);
    const lastBb = bb[bb.length - 1];

    // Stochastic
    const stochasticInput = {
        high: highs,
        low: lows,
        close: closes,
        period: 14,
        signalPeriod: 3
    };
    const stochastic = ti.Stochastic.calculate(stochasticInput);
    const lastStochastic = stochastic[stochastic.length - 1];

    return {
        rsi: {
            value: lastRsi,
            overbought: lastRsi > 70,
            oversold: lastRsi < 30
        },
        macd: {
            value: lastMacd,
            histogram: lastMacd.histogram,
            signal: lastMacd.signal > lastMacd.MACD ? 'BUY' : 'SELL'
        },
        bollinger: {
            upper: lastBb.upper,
            middle: lastBb.middle,
            lower: lastBb.lower,
            pricePosition: (marketData[marketData.length - 1].close - lastBb.lower) / (lastBb.upper - lastBb.lower) * 100
        },
        stochastic: {
            k: lastStochastic.k,
            d: lastStochastic.d,
            overbought: lastStochastic.k > 80,
            oversold: lastStochastic.k < 20
        }
    };
}

async function sendMarketAnalysis(chatId) {
    try {
        const settings = getUserSettings(chatId);
        await fetchMarketData(settings.symbol, settings.interval);
        calculateFibonacciLevels();
        calculateSupportResistance();
        const indicators = calculateIndicators();

        const lastCandle = marketData[marketData.length - 1];
        const currentPrice = lastCandle.close;

        // –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        let signals = [];
        let confidence = 0;

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏
        const fibDistances = {};
        for (const [level, value] of Object.entries(fibLevels)) {
            if (level.includes('level')) {
                const distance = Math.abs(currentPrice - value) / value * 100;
                fibDistances[level] = distance;

                if (distance < 0.5) { // –¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ —É—Ä–æ–≤–Ω—é –§–∏–±–æ–Ω–∞—á—á–∏
                    signals.push(`–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É —É—Ä–æ–≤–Ω—è –§–∏–±–æ–Ω–∞—á—á–∏ ${level.replace('level', '')}% (${value.toFixed(2)})`);
                    confidence += 15;
                }
            }
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        for (const level of supportResistanceLevels) {
            const distance = Math.abs(currentPrice - level.value) / level.value * 100;

            if (distance < 0.3) { // –¶–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
                signals.push(`–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É ${level.type === 'support' ? '–ø–æ–¥–¥–µ—Ä–∂–∫–∏' : '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è'} ${level.value.toFixed(2)}`);
                confidence += 15;
            }
        }

        // 3. –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        // RSI
        if (indicators.rsi.overbought) {
            signals.push(`RSI (${indicators.rsi.value.toFixed(2)}) - –ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨`);
            confidence -= 10;
        } else if (indicators.rsi.oversold) {
            signals.push(`RSI (${indicators.rsi.value.toFixed(2)}) - –ü–ï–†–ï–ü–†–û–î–ê–ù–û–°–¢–¨`);
            confidence += 10;
        }

        // MACD
        if (indicators.macd.histogram > 0 && indicators.macd.signal === 'BUY') {
            signals.push(`MACD - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£`);
            confidence += 20;
        } else if (indicators.macd.histogram < 0 && indicators.macd.signal === 'SELL') {
            signals.push(`MACD - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£`);
            confidence -= 20;
        }

        // Bollinger Bands
        if (currentPrice < indicators.bollinger.lower * 1.01) {
            signals.push(`–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫`);
            confidence += 15;
        } else if (currentPrice > indicators.bollinger.upper * 0.99) {
            signals.push(`–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑`);
            confidence -= 15;
        }

        // Stochastic
        if (indicators.stochastic.oversold && indicators.stochastic.k > indicators.stochastic.d) {
            signals.push(`Stochastic - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£`);
            confidence += 10;
        } else if (indicators.stochastic.overbought && indicators.stochastic.k < indicators.stochastic.d) {
            signals.push(`Stochastic - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£`);
            confidence -= 10;
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = Math.max(0, Math.min(100, confidence + 50));

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        let message = `üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (${settings.symbol} ${settings.interval}) - ${new Date().toLocaleString()}\n\n`;
        message += `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(2)}\n\n`;

        // –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
        message += `üìä –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏:\n`;
        message += `0% (—Ç–æ—á–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞): ${fibLevels.point0.toFixed(2)}\n`;
        message += `23.6%: ${fibLevels.level236.toFixed(2)}\n`;
        message += `38.2%: ${fibLevels.level382.toFixed(2)}\n`;
        message += `50%: ${fibLevels.level500.toFixed(2)}\n`;
        message += `61.8%: ${fibLevels.level618.toFixed(2)}\n`;
        message += `78.6%: ${fibLevels.level786.toFixed(2)}\n`;
        message += `100% (–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞): ${fibLevels.point100.toFixed(2)}\n\n`;

        // –õ–æ–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        message += `üìå –ë–ª–∏–∂–∞–π—à–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:\n`;
        const nearbyLevels = supportResistanceLevels
            .filter(level => Math.abs(level.value - currentPrice) / currentPrice < 0.05)
            .sort((a, b) => Math.abs(a.value - currentPrice) - Math.abs(b.value - currentPrice))
            .slice(0, 5);

        if (nearbyLevels.length > 0) {
            nearbyLevels.forEach(level => {
                message += `${level.type === 'support' ? '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' : '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ'}: ${level.value.toFixed(2)} (${new Date(level.time).toLocaleTimeString()})\n`;
            });
        } else {
            message += `–ù–µ—Ç –±–ª–∏–∑–∫–∏—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π\n`;
        }
        message += `\n`;

        // –°–∏–≥–Ω–∞–ª—ã
        message += `üö¶ –°–∏–≥–Ω–∞–ª—ã:\n`;
        if (signals.length > 0) {
            signals.forEach(signal => {
                message += `‚Ä¢ ${signal}\n`;
            });
        } else {
            message += `–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞\n`;
        }
        message += `\n`;

        // –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        message += `üéØ –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence.toFixed(0)}%\n`;
        if (confidence > 70) {
            message += `üí™ –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£!\n`;
        } else if (confidence > 60) {
            message += `üëç –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É\n`;
        } else if (confidence < 30) {
            message += `üõë –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£!\n`;
        } else if (confidence < 40) {
            message += `üëé –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n`;
        } else {
            message += `ü§ù –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å\n`;
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.sendMessage(chatId, message, mainKeyboard);
    } catch (error) {
        sendError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: ${error.message}`);
        bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, mainKeyboard);
    }
}

function sendIndicatorsInfo(chatId) {
    const settings = getUserSettings(chatId);
    fetchMarketData(settings.symbol, settings.interval).then(() => {
        const indicators = calculateIndicators();
        const lastCandle = marketData[marketData.length - 1];
        const currentPrice = lastCandle.close;

        let message = `üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (${settings.symbol} ${settings.interval})\n\n`;
        message += `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(2)}\n\n`;

        // RSI
        message += `üìâ RSI (14): ${indicators.rsi.value.toFixed(2)}\n`;
        message += `–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${indicators.rsi.overbought ? '–ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨' : indicators.rsi.oversold ? '–ü–ï–†–ï–ü–†–û–î–ê–ù–û–°–¢–¨' : '–ù–ï–ô–¢–†–ê–õ–¨–ù–û'}\n\n`;

        // MACD
        message += `üìä MACD (12/26/9)\n`;
        message += `–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: ${indicators.macd.histogram.toFixed(4)}\n`;
        message += `–°–∏–≥–Ω–∞–ª: ${indicators.macd.signal}\n\n`;

        // Bollinger Bands
        message += `üìà Bollinger Bands (20,2)\n`;
        message += `–í–µ—Ä—Ö–Ω—è—è: ${indicators.bollinger.upper.toFixed(2)}\n`;
        message += `–°—Ä–µ–¥–Ω—è—è: ${indicators.bollinger.middle.toFixed(2)}\n`;
        message += `–ù–∏–∂–Ω—è—è: ${indicators.bollinger.lower.toFixed(2)}\n`;
        message += `–ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã: ${indicators.bollinger.pricePosition.toFixed(1)}%\n\n`;

        // Stochastic
        message += `üìä Stochastic (14,3)\n`;
        message += `K: ${indicators.stochastic.k.toFixed(2)}\n`;
        message += `D: ${indicators.stochastic.d.toFixed(2)}\n`;
        message += `–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${indicators.stochastic.overbought ? '–ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨' : indicators.stochastic.oversold ? '–ü–ï–†–ï–ü–†–û–î–ê–ù–û–°–¢–¨' : '–ù–ï–ô–¢–†–ê–õ–¨–ù–û'}`;

        bot.sendMessage(chatId, message, mainKeyboard);
    });
}

function sendLevelsInfo(chatId) {
    const settings = getUserSettings(chatId);
    fetchMarketData(settings.symbol, settings.interval).then(() => {
        calculateFibonacciLevels();
        calculateSupportResistance();
        const lastCandle = marketData[marketData.length - 1];
        const currentPrice = lastCandle.close;

        let message = `üìä –£—Ä–æ–≤–Ω–∏ —Ä—ã–Ω–∫–∞ (${settings.symbol} ${settings.interval})\n\n`;
        message += `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(2)}\n\n`;

        // –§–∏–±–æ–Ω–∞—á—á–∏
        message += `üìâ –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏:\n`;
        message += `23.6%: ${fibLevels.level236.toFixed(2)}\n`;
        message += `38.2%: ${fibLevels.level382.toFixed(2)}\n`;
        message += `50.0%: ${fibLevels.level500.toFixed(2)}\n`;
        message += `61.8%: ${fibLevels.level618.toFixed(2)}\n\n`;

        // –ë–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        message += `üìå –ë–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏:\n`;
        const nearbyLevels = supportResistanceLevels
            .filter(level => Math.abs(level.value - currentPrice) / currentPrice < 0.1)
            .sort((a, b) => Math.abs(a.value - currentPrice) - Math.abs(b.value - currentPrice))
            .slice(0, 4);

        if (nearbyLevels.length > 0) {
            nearbyLevels.forEach(level => {
                const distance = ((level.value - currentPrice) / currentPrice * 100).toFixed(2);
                message += `${level.type === 'support' ? 'üîµ –ü–æ–¥–¥–µ—Ä–∂–∫–∞' : 'üî¥ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ'}: ${level.value.toFixed(2)} (${distance}%)\n`;
            });
        } else {
            message += `–ù–µ—Ç –±–ª–∏–∑–∫–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö —É—Ä–æ–≤–Ω–µ–π\n`;
        }

        bot.sendMessage(chatId, message, mainKeyboard);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
function sendError(errorMessage) {
    console.error(`[ERROR] ${new Date().toISOString()}: ${errorMessage}`);
    bot.sendMessage(CHAT_ID, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ${errorMessage}`)
        .catch(err => console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${err.message}`));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üîÆ –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.`, mainKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text) return;

    switch (text) {
        case 'üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞':
            sendMarketAnalysis(chatId);
            break;

        case 'üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã':
            sendIndicatorsInfo(chatId);
            break;

        case 'üìâ –£—Ä–æ–≤–Ω–∏':
            sendLevelsInfo(chatId);
            break;

        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
                reply_markup: {
                    keyboard: [
                        ['–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º'],
                        ['–ù–∞–∑–∞–¥']
                    ],
                    resize_keyboard: true
                }
            });
            break;

        case '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É':
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:', symbolKeyboard);
            break;

        case '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º':
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:', intervalKeyboard);
            break;

        case '15m':
        case '1h':
        case '4h':
        case '1d':
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            getUserSettings(chatId).interval = text;
            bot.sendMessage(chatId, `–¢–∞–π–º—Ñ—Ä–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${text}. –ù–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª.`, mainKeyboard);
            break;

        case 'BTCUSDT':
        case 'ETHUSDT':
        case 'BNBUSDT':
        case 'SOLUSDT':
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É
            getUserSettings(chatId).symbol = text;
            bot.sendMessage(chatId, `–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${text}. –ù–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø–∞—Ä—É.`, mainKeyboard);
            break;

        case '–ù–∞–∑–∞–¥':
            bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainKeyboard);
            break;
    }
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–Ω–∞–ª–∏–∑–∞
setInterval(() => {
    analyzeMarket();
}, 15 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
function analyzeMarket() {
    if (Date.now() - lastAnalysisTime < 15 * 60 * 1000) return;
    lastAnalysisTime = Date.now();

    // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    const settings = getUserSettings(CHAT_ID);
    
    fetchMarketData(settings.symbol, settings.interval)
        .then(() => {
            calculateFibonacciLevels();
            calculateSupportResistance();
            const indicators = calculateIndicators();
            
            // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞... (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ sendMarketAnalysis)
            // –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–ø—É—Å—Ç–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–¥–∞
            
            sendMarketAnalysis(CHAT_ID);
        })
        .catch(error => sendError(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`));
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');