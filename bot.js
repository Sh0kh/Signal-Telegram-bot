const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const ti = require('technicalindicators');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï)
const BOT_TOKEN = '7955550632:AAGrNgJRVbnIWsckCkcyZglo-lxvooWT3Wg';
const API_KEY = 'a9db6b712c1a40299e39d7266af5b2b3';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSettings = {};

function getUserSettings(chatId) {
    if (!userSettings[chatId]) {
        userSettings[chatId] = {
            symbol: 'EUR/USD',
            interval: '15min',
            active: false // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
        };
    }
    return userSettings[chatId];
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
const availablePairs = ['EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'BTC/USD'];
const availableIntervals = ['5min', '15min', '1h', '4h', '1day'];

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function fetchMarketData(symbol, interval) {
    try {
        const response = await axios.get(`https://api.twelvedata.com/time_series`, {
            params: {
                symbol: symbol,
                interval: interval,
                apikey: API_KEY,
                outputsize: 100,
                format: 'JSON'
            }
        });

        if (!response.data || !response.data.values) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        }

        return response.data.values.map(item => ({
            time: new Date(item.datetime).getTime(),
            open: parseFloat(item.open),
            high: parseFloat(item.high),
            low: parseFloat(item.low),
            close: parseFloat(item.close)
        })).reverse();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
        return null;
    }
}

async function analyzeMarket(chatId) {
    const settings = getUserSettings(chatId);
    if (!settings.active) return;

    try {
        const marketData = await fetchMarketData(settings.symbol, settings.interval);
        if (!marketData || marketData.length < 50) {
            bot.sendMessage(chatId, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ${settings.symbol} –Ω–∞ ${settings.interval}`);
            return;
        }

        // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –§–∏–±–æ
        const last50 = marketData.slice(-50);
        const highs = last50.map(item => item.high);
        const lows = last50.map(item => item.low);
        
        // –¢–æ—á–∫–∏ –§–∏–±–æ (0% –∏ 100%)
        const highestHigh = Math.max(...highs);
        const lowestLow = Math.min(...lows);
        const isUptrend = highs.lastIndexOf(highestHigh) > lows.lastIndexOf(lowestLow);

        // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
        const fibLevels = {
            point0: isUptrend ? lowestLow : highestHigh,
            point100: isUptrend ? highestHigh : lowestLow,
            level236: isUptrend ? lowestLow + (highestHigh - lowestLow) * 0.236 : highestHigh - (highestHigh - lowestLow) * 0.236,
            level382: isUptrend ? lowestLow + (highestHigh - lowestLow) * 0.382 : highestHigh - (highestHigh - lowestLow) * 0.382,
            level50: isUptrend ? lowestLow + (highestHigh - lowestLow) * 0.5 : highestHigh - (highestHigh - lowestLow) * 0.5,
            level618: isUptrend ? lowestLow + (highestHigh - lowestLow) * 0.618 : highestHigh - (highestHigh - lowestLow) * 0.618
        };

        // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        const closes = marketData.map(item => item.close);
        const currentPrice = closes[closes.length - 1];
        const rsi = ti.RSI.calculate({ values: closes, period: 14 }).slice(-3); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
        const macd = ti.MACD.calculate({
            values: closes,
            fastPeriod: 12,
            slowPeriod: 26,
            signalPeriod: 9
        }).slice(-3);

        // 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –§–∏–±–æ-—É—Ä–æ–≤–Ω–µ–π
        let chartMsg = `üìä ${settings.symbol} ${settings.interval}\n`;
        chartMsg += `üîº –¢–æ—á–∫–∞ 0% (${isUptrend ? 'Low' : 'High'}): ${fibLevels.point0.toFixed(5)}\n`;
        chartMsg += `üîΩ –¢–æ—á–∫–∞ 100% (${isUptrend ? 'High' : 'Low'}): ${fibLevels.point100.toFixed(5)}\n\n`;
        chartMsg += `üìà –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ:\n`;
        chartMsg += `23.6%: ${fibLevels.level236.toFixed(5)}\n`;
        chartMsg += `38.2%: ${fibLevels.level382.toFixed(5)}\n`;
        chartMsg += `50.0%: ${fibLevels.level50.toFixed(5)}\n`;
        chartMsg += `61.8%: ${fibLevels.level618.toFixed(5)}\n\n`;
        chartMsg += `üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(5)}`;

        // 5. –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        let signals = [];
        const levelsToCheck = ['level382', 'level50', 'level618'];
        
        levelsToCheck.forEach(level => {
            const levelPrice = fibLevels[level];
            const distance = Math.abs(currentPrice - levelPrice);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0.5%)
            if (distance/levelPrice < 0.005) {
                // –£—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞:
                // 1) RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                // 2) MACD –º–µ–Ω—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                const rsiCondition = isUptrend 
                    ? rsi.some(v => v > 70) 
                    : rsi.some(v => v < 30);
                
                const macdCondition = isUptrend
                    ? macd[2].histogram < macd[1].histogram // MACD –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è
                    : macd[2].histogram > macd[1].histogram;
                
                if (rsiCondition && macdCondition) {
                    const signalType = isUptrend ? "üî¥ SELL" : "üü¢ BUY";
                    signals.push(`${signalType} –Ω–∞ ${level.replace('level', '')}% (${levelPrice.toFixed(5)})`);
                }
            }
        });

        // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (signals.length > 0) {
            chartMsg += "\n\nüéØ –°–ò–ì–ù–ê–õ–´:\n" + signals.join("\n");
            chartMsg += `\n\nüìâ RSI: ${rsi[2].toFixed(2)}`;
            chartMsg += `\nüìä MACD: ${macd[2].histogram.toFixed(5)}`;
        } else {
            chartMsg += "\n\nüîç –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç - –æ–∂–∏–¥–∞–µ–º –∫–∞—Å–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π";
        }

        bot.sendMessage(chatId, chartMsg);

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:`, error);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${error.message}`);
    }
}
// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É'],
            ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
            ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ],
        resize_keyboard: true
    }
};

const settingsKeyboard = {
    reply_markup: {
        keyboard: [
            ['–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É', '–í—ã–±—Ä–∞—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º'],
            ['–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑', '–ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üìä –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ø–æ –§–∏–±–æ–Ω–∞—á—á–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:`, mainKeyboard);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const settings = getUserSettings(chatId);

    if (!text) return;

    try {
        if (text === 'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É') {
            if (!settings.active) {
                bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
                return;
            }
            bot.sendMessage(chatId, `–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ ${settings.symbol} –Ω–∞ ${settings.interval}...`);
            await analyzeMarket(chatId);
        }
        else if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
            let status = settings.active ? '‚úÖ –í–ö–õ–Æ–ß–ï–ù' : '‚ùå –í–´–ö–õ–Æ–ß–ï–ù';
            bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ü–∞—Ä–∞: ${settings.symbol}\n–¢–∞–π–º—Ñ—Ä–µ–π–º: ${settings.interval}\n–ê–Ω–∞–ª–∏–∑: ${status}`, settingsKeyboard);
        }
        else if (text === '–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É') {
            const pairButtons = availablePairs.map(pair => ({ text: pair }));
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:', {
                reply_markup: {
                    keyboard: [
                        pairButtons,
                        [{ text: '–ù–∞–∑–∞–¥' }]
                    ],
                    resize_keyboard: true
                }
            });
        }
        else if (text === '–í—ã–±—Ä–∞—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º') {
            const intervalButtons = availableIntervals.map(interval => ({ text: interval }));
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:', {
                reply_markup: {
                    keyboard: [
                        intervalButtons,
                        [{ text: '–ù–∞–∑–∞–¥' }]
                    ],
                    resize_keyboard: true
                }
            });
        }
        else if (text === '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑') {
            settings.active = !settings.active;
            bot.sendMessage(chatId, `–ê–Ω–∞–ª–∏–∑ ${settings.active ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'} –¥–ª—è ${settings.symbol}`, settingsKeyboard);
        }
        else if (availablePairs.includes(text)) {
            settings.symbol = text;
            bot.sendMessage(chatId, `–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${text}`, settingsKeyboard);
        }
        else if (availableIntervals.includes(text)) {
            settings.interval = text;
            bot.sendMessage(chatId, `–¢–∞–π–º—Ñ—Ä–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${text}`, settingsKeyboard);
        }
        else if (text === '–ù–∞–∑–∞–¥') {
            bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainKeyboard);
        }
        else if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
            bot.sendMessage(chatId, `üìö –ü–æ–º–æ—â—å:\n\n1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n2. –í–∫–ª—é—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É"\n4. –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã`, mainKeyboard);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', mainKeyboard);
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...');