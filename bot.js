const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const ti = require('technicalindicators');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '7955550632:AAGrNgJRVbnIWsckCkcyZglo-lxvooWT3Wg';
const API_KEY = 'a9db6b712c1a40299e39d7266af5b2b3';
const CHAT_ID = '5214859281';
const TWELVEDATA_API_BASE = 'https://api.twelvedata.com';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let marketData = [];
let fibLevels = {};
let supportResistanceLevels = [];
let lastAnalysisTime = 0;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSettings = {};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
const LANGUAGES = {
    ru: {
        marketAnalysis: 'üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ Forex ({symbol} {interval}) - {date}',
        currentPrice: '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}',
        fibonacciLevels: 'üìä –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏:',
        reversePoint: '0% (—Ç–æ—á–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞): {value}',
        fib236: '23.6%: {value}',
        fib382: '38.2%: {value}',
        fib500: '50%: {value}',
        fib618: '61.8%: {value}',
        fib786: '78.6%: {value}',
        endPoint: '100% (–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞): {value}',
        nearbyLevels: 'üìå –ë–ª–∏–∂–∞–π—à–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:',
        support: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        resistance: '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ',
        noLevels: '–ù–µ—Ç –±–ª–∏–∑–∫–∏—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π',
        signals: 'üö¶ –°–∏–≥–Ω–∞–ª—ã:',
        noSignals: '–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞',
        finalConfidence: 'üéØ –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%',
        strongBuy: 'üí™ –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£!',
        moderateBuy: 'üëç –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É',
        strongSell: 'üõë –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£!',
        moderateSell: 'üëé –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É',
        neutral: 'ü§ù –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å',
        priceNearFib: '–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É —É—Ä–æ–≤–Ω—è –§–∏–±–æ–Ω–∞—á—á–∏ {level}% ({value})',
        priceNearLevel: '–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É {type} {value}',
        rsiOverbought: 'RSI ({value}) - –ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨',
        rsiOversold: 'RSI ({value}) - –ü–ï–†–ï–ü–†–û–î–ê–ù–û–°–¢–¨',
        macdBuy: 'MACD - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£',
        macdSell: 'MACD - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£',
        priceLowerBB: '–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö',
        priceUpperBB: '–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑',
        stochBuy: 'Stochastic - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£',
        stochSell: 'Stochastic - –°–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£',
        priceMovementUp: '‚§¥Ô∏è –¶–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –í–í–ï–†–• –∫ —É—Ä–æ–≤–Ω—é {level}',
        priceMovementDown: '‚§µÔ∏è –¶–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –í–ù–ò–ó –∫ —É—Ä–æ–≤–Ω—é {level}',
        marketSituation: 'üëÅÔ∏è –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: {situation}'
    },
    uz: {
        marketAnalysis: 'üìä Forex bozorini tahlil qilish ({symbol} {interval}) - {date}',
        currentPrice: 'Joriy narx: {price}',
        fibonacciLevels: 'üìä Fibonacci darajalari:',
        reversePoint: '0% (qaytish nuqtasi): {value}',
        fib236: '23.6%: {value}',
        fib382: '38.2%: {value}',
        fib500: '50%: {value}',
        fib618: '61.8%: {value}',
        fib786: '78.6%: {value}',
        endPoint: '100% (oxirgi nuqta): {value}',
        nearbyLevels: 'üìå Yaqin mahalliy darajalar:',
        support: 'Qo\'llab-quvvatlash',
        resistance: 'Qarshilik',
        noLevels: 'Yaqin mahalliy darajalar yo\'q',
        signals: 'üö¶ Signallar:',
        noSignals: 'Kirish uchun kuchli signallar yo\'q',
        finalConfidence: 'üéØ Yakuniy ishonch: {confidence}%',
        strongBuy: 'üí™ SOTIB OLISH UCHUN KUCHLI SIGNAL!',
        moderateBuy: 'üëç Sotib olish uchun o\'rtacha signal',
        strongSell: 'üõë SOTISH UCHUN KUCHLI SIGNAL!',
        moderateSell: 'üëé Sotish uchun o\'rtacha signal',
        neutral: 'ü§ù Neytral zona - kutish yaxshiroq',
        priceNearFib: 'Narx Fibonacci darajasi {level}% ({value}) yaqinida',
        priceNearLevel: 'Narx {type} {value} yaqinida',
        rsiOverbought: 'RSI ({value}) - HADDAN TASHQARI SOTIB OLINGAN',
        rsiOversold: 'RSI ({value}) - HADDAN TASHQARI SOTILGAN',
        macdBuy: 'MACD - SOTIB OLISH signali',
        macdSell: 'MACD - SOTISH signali',
        priceLowerBB: 'Narx Bollinger pasttarafi chegarasida - yuqoriga sakrash mumkin',
        priceUpperBB: 'Narx Bollinger yuqoritarafi chegarasida - pastga sakrash mumkin',
        stochBuy: 'Stochastic - SOTIB OLISH signali',
        stochSell: 'Stochastic - SOTISH signali',
        priceMovementUp: '‚§¥Ô∏è Narx {level} darajasiga YUQORIGA harakat qilmoqda',
        priceMovementDown: '‚§µÔ∏è Narx {level} darajasiga PASTGA harakat qilmoqda',
        marketSituation: 'üëÅÔ∏è Joriy vaziyat: {situation}'
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserSettings(chatId) {
    if (!userSettings[chatId]) {
        userSettings[chatId] = {
            symbol: 'EUR/USD', // –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            interval: '15min',  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            language: 'ru'      // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
    }
    return userSettings[chatId];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
function getText(key, settings, replacements = {}) {
    const lang = LANGUAGES[settings.language] || LANGUAGES.ru;
    let text = lang[key] || LANGUAGES.ru[key];
    
    // –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    for (const [placeholder, value] of Object.entries(replacements)) {
        text = text.replace(`{${placeholder}}`, value);
    }
    
    return text;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const getMainKeyboard = (language) => {
    const keyboards = {
        ru: {
            reply_markup: {
                keyboard: [
                    ['üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'],
                    ['üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã', 'üìâ –£—Ä–æ–≤–Ω–∏'],
                    ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
                ],
                resize_keyboard: true
            }
        },
        uz: {
            reply_markup: {
                keyboard: [
                    ['üìä Bozor tahlili'],
                    ['üìà Indikatorlar', 'üìâ Darajalar'],
                    ['‚öôÔ∏è Sozlamalar']
                ],
                resize_keyboard: true
            }
        }
    };
    
    return keyboards[language] || keyboards.ru;
};

const getIntervalKeyboard = (language) => {
    const keyboards = {
        ru: {
            reply_markup: {
                keyboard: [
                    ['5min', '15min', '1h'],
                    ['4h', '1day', '–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        },
        uz: {
            reply_markup: {
                keyboard: [
                    ['5min', '15min', '1h'],
                    ['4h', '1day', 'Orqaga']
                ],
                resize_keyboard: true
            }
        }
    };
    
    return keyboards[language] || keyboards.ru;
};

const getSymbolKeyboard = (language) => {
    const keyboards = {
        ru: {
            reply_markup: {
                keyboard: [
                    ['EUR/USD', 'GBP/USD'],
                    ['USD/JPY', 'GBP/JPY'],
                    ['AUD/USD', 'USD/CAD'],
                    ['–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        },
        uz: {
            reply_markup: {
                keyboard: [
                    ['EUR/USD', 'GBP/USD'],
                    ['USD/JPY', 'GBP/JPY'],
                    ['AUD/USD', 'USD/CAD'],
                    ['Orqaga']
                ],
                resize_keyboard: true
            }
        }
    };
    
    return keyboards[language] || keyboards.ru;
};

const getLanguageKeyboard = () => {
    return {
        reply_markup: {
            keyboard: [
                ['–†—É—Å—Å–∫–∏–π', 'O\'zbekcha'],
                ['–ù–∞–∑–∞–¥ / Orqaga']
            ],
            resize_keyboard: true
        }
    };
};

const getSettingsKeyboard = (language) => {
    const keyboards = {
        ru: {
            reply_markup: {
                keyboard: [
                    ['–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º'],
                    ['–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', '–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        },
        uz: {
            reply_markup: {
                keyboard: [
                    ['Juftlikni o\'zgartirish', 'Vaqt oralig\'ini o\'zgartirish'],
                    ['Tilni o\'zgartirish', 'Orqaga']
                ],
                resize_keyboard: true
            }
        }
    };
    
    return keyboards[language] || keyboards.ru;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å TwelveData API
async function fetchMarketData(symbol = 'EUR/USD', interval = '15min', limit = 100) {
    try {
        const response = await axios.get(`${TWELVEDATA_API_BASE}/time_series`, {
            params: {
                symbol: symbol,
                interval: interval,
                outputsize: limit,
                apikey: API_KEY
            }
        });

        if (!response.data || !response.data.values) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        }

        // TwelveData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        const values = response.data.values.reverse();

        marketData = values.map(item => ({
            time: new Date(item.datetime).getTime(),
            open: parseFloat(item.open),
            high: parseFloat(item.high),
            low: parseFloat(item.low),
            close: parseFloat(item.close),
            volume: parseFloat(item.volume || 0)
        }));

        return marketData;
    } catch (error) {
        sendError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        return null;
    }
}

function calculateFibonacciLevels() {
    if (marketData.length < 2) return null;

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞ –ø–µ—Ä–∏–æ–¥
    const highs = marketData.map(item => item.high);
    const lows = marketData.map(item => item.low);
    const highestHigh = Math.max(...highs);
    const lowestLow = Math.min(...lows);

    // –¢–æ—á–∫–∏ –§–∏–±–æ–Ω–∞—á—á–∏
    fibLevels = {
        point0: highestHigh,
        point100: lowestLow,
        level236: highestHigh - (highestHigh - lowestLow) * 0.236,
        level382: highestHigh - (highestHigh - lowestLow) * 0.382,
        level500: highestHigh - (highestHigh - lowestLow) * 0.5,
        level618: highestHigh - (highestHigh - lowestLow) * 0.618,
        level786: highestHigh - (highestHigh - lowestLow) * 0.786,
        level1000: lowestLow
    };

    return fibLevels;
}

function calculateSupportResistance() {
    if (marketData.length < 20) return null;

    supportResistanceLevels = [];
    const sensitivity = 2;

    // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
    for (let i = sensitivity; i < marketData.length - sensitivity; i++) {
        const windowHigh = marketData.slice(i - sensitivity, i + sensitivity + 1).map(item => item.high);
        const windowLow = marketData.slice(i - sensitivity, i + sensitivity + 1).map(item => item.low);

        const currentHigh = marketData[i].high;
        const currentLow = marketData[i].low;

        if (currentHigh === Math.max(...windowHigh)) {
            supportResistanceLevels.push({
                value: currentHigh,
                type: 'resistance',
                time: marketData[i].time
            });
        }

        if (currentLow === Math.min(...windowLow)) {
            supportResistanceLevels.push({
                value: currentLow,
                type: 'support',
                time: marketData[i].time
            });
        }
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–ª–∏–∑–∫–∏–µ —É—Ä–æ–≤–Ω–∏
    const groupedLevels = [];
    for (const level of supportResistanceLevels) {
        const similarLevel = groupedLevels.find(gl => 
            Math.abs(gl.value - level.value) / level.value < 0.0005); // 0.05% —Ä–∞–∑–Ω–∏—Ü–∞
        
        if (similarLevel) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            similarLevel.count = (similarLevel.count || 1) + 1;
            similarLevel.strength = (similarLevel.count || 1);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            level.count = 1;
            level.strength = 1;
            groupedLevels.push(level);
        }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
    supportResistanceLevels = groupedLevels.sort((a, b) => a.value - b.value);

    return supportResistanceLevels;
}

function calculateIndicators() {
    const closes = marketData.map(item => item.close);
    const highs = marketData.map(item => item.high);
    const lows = marketData.map(item => item.low);

    // RSI
    const rsiInput = {
        values: closes,
        period: 14
    };
    const rsi = ti.RSI.calculate(rsiInput);
    const lastRsi = rsi[rsi.length - 1];

    // MACD
    const macdInput = {
        values: closes,
        fastPeriod: 12,
        slowPeriod: 26,
        signalPeriod: 9,
        SimpleMAOscillator: false,
        SimpleMASignal: false
    };
    const macd = ti.MACD.calculate(macdInput);
    const lastMacd = macd[macd.length - 1];

    // Bollinger Bands
    const bbInput = {
        values: closes,
        period: 20,
        stdDev: 2
    };
    const bb = ti.BollingerBands.calculate(bbInput);
    const lastBb = bb[bb.length - 1];

    // Stochastic
    const stochasticInput = {
        high: highs,
        low: lows,
        close: closes,
        period: 14,
        signalPeriod: 3
    };
    const stochastic = ti.Stochastic.calculate(stochasticInput);
    const lastStochastic = stochastic[stochastic.length - 1];

    // –¢—Ä–µ–Ω–¥—ã (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é EMA)
    const emaShortInput = {
        values: closes,
        period: 9
    };
    const emaShort = ti.EMA.calculate(emaShortInput);
    
    const emaLongInput = {
        values: closes,
        period: 21
    };
    const emaLong = ti.EMA.calculate(emaLongInput);
    
    const lastEmaShort = emaShort[emaShort.length - 1];
    const lastEmaLong = emaLong[emaLong.length - 1];
    
    const trend = lastEmaShort > lastEmaLong ? 'UP' : 'DOWN';

    return {
        rsi: {
            value: lastRsi,
            overbought: lastRsi > 70,
            oversold: lastRsi < 30
        },
        macd: {
            value: lastMacd,
            histogram: lastMacd.histogram,
            signal: lastMacd.signal > lastMacd.MACD ? 'BUY' : 'SELL'
        },
        bollinger: {
            upper: lastBb.upper,
            middle: lastBb.middle,
            lower: lastBb.lower,
            pricePosition: (marketData[marketData.length - 1].close - lastBb.lower) / (lastBb.upper - lastBb.lower) * 100
        },
        stochastic: {
            k: lastStochastic.k,
            d: lastStochastic.d,
            overbought: lastStochastic.k > 80,
            oversold: lastStochastic.k < 20
        },
        trend: trend
    };
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
function determineMarketDirection(currentPrice) {
    if (marketData.length < 5) return null;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const recentCandles = marketData.slice(-5);
    const priceChanges = [];
    
    for (let i = 1; i < recentCandles.length; i++) {
        priceChanges.push(recentCandles[i].close - recentCandles[i-1].close);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    const avgChange = priceChanges.reduce((sum, change) => sum + change, 0) / priceChanges.length;
    
    return {
        direction: avgChange > 0 ? 'UP' : 'DOWN',
        strength: Math.abs(avgChange) / currentPrice * 10000 // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞
    };
}

// –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –§–∏–±–æ–Ω–∞—á—á–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
function findNextFibLevel(currentPrice, direction) {
    const levels = [
        { name: 'level1000', value: fibLevels.point100 },
        { name: 'level786', value: fibLevels.level786 },
        { name: 'level618', value: fibLevels.level618 },
        { name: 'level500', value: fibLevels.level500 },
        { name: 'level382', value: fibLevels.level382 },
        { name: 'level236', value: fibLevels.level236 },
        { name: 'level0', value: fibLevels.point0 }
    ];
    
    levels.sort((a, b) => a.value - b.value);
    
    if (direction === 'UP') {
        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        for (const level of levels) {
            if (level.value > currentPrice) {
                return {
                    name: level.name.replace('level', ''),
                    value: level.value
                };
            }
        }
    } else {
        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        for (let i = levels.length - 1; i >= 0; i--) {
            if (levels[i].value < currentPrice) {
                return {
                    name: levels[i].name.replace('level', ''),
                    value: levels[i].value
                };
            }
        }
    }
    
    return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —É—Ä–æ–≤–Ω—é –§–∏–±–æ–Ω–∞—á—á–∏ —Å–æ —Å—Ç—Ä–æ–≥–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
function checkFibonacciProximity(currentPrice) {
    const fibProximity = [];
    const threshold = 0.0015; // 0.15% –æ—Ç —Ü–µ–Ω—ã –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è "–±–ª–∏–∑–∫–æ"
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
    const keyLevels = [
        { name: '0', value: fibLevels.point0 },
        { name: '236', value: fibLevels.level236 },
        { name: '382', value: fibLevels.level382 },
        { name: '500', value: fibLevels.level500 },
        { name: '618', value: fibLevels.level618 },
        { name: '786', value: fibLevels.level786 },
        { name: '1000', value: fibLevels.point100 }
    ];
    
    for (const level of keyLevels) {
        const distance = Math.abs(currentPrice - level.value) / currentPrice;
        
        if (distance < threshold) {
            fibProximity.push({
                level: level.name,
                value: level.value,
                distance: distance
            });
        }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –±–ª–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
    fibProximity.sort((a, b) => a.distance - b.distance);
    
    return fibProximity.slice(0, 1);
}

async function sendMarketAnalysis(chatId) {
    try {
        const settings = getUserSettings(chatId);
        await fetchMarketData(settings.symbol, settings.interval);

        if (!marketData || marketData.length === 0) {
            const errorMsg = settings.language === 'uz' ? 
                `${settings.symbol} uchun ma'lumotlar olinmadi. Sozlamalarni tekshiring yoki keyinroq qayta urinib ko'ring.` :
                `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${settings.symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
            
            bot.sendMessage(chatId, errorMsg, getMainKeyboard(settings.language));
            return;
        }

        calculateFibonacciLevels();
        calculateSupportResistance();
        const indicators = calculateIndicators();

        const lastCandle = marketData[marketData.length - 1];
        const currentPrice = lastCandle.close;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
        const marketDirection = determineMarketDirection(currentPrice);
        const nextFibLevel = marketDirection ? findNextFibLevel(currentPrice, marketDirection.direction) : null;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —É—Ä–æ–≤–Ω—è–º –§–∏–±–æ–Ω–∞—á—á–∏ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è)
        const nearbyFibLevels = checkFibonacciProximity(currentPrice);

        // –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        let signals = [];
        let confidence = 50; // –°—Ç–∞—Ä—Ç—É–µ–º —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏
        if (nearbyFibLevels.length > 0) {
            for (const fib of nearbyFibLevels) {
                signals.push(getText('priceNearFib', settings, {
                    level: fib.level,
                    value: fib.value.toFixed(4)
                }));
                confidence += 5; // –ú–µ–Ω—å—à–µ –≤–ª–∏—è–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            }
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        const nearLevels = supportResistanceLevels
            .filter(level => Math.abs(currentPrice - level.value) / level.value < 0.0015) // 0.15%
            .sort((a, b) => Math.abs(a.value - currentPrice) - Math.abs(b.value - currentPrice))
            .slice(0, 2); // –¢–æ–ª—å–∫–æ 2 –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω—è –º–∞–∫—Å–∏–º—É–º

        for (const level of nearLevels) {
            const levelType = level.type === 'support' ? 
                getText('support', settings) : 
                getText('resistance', settings);
            
            signals.push(getText('priceNearLevel', settings, {
                type: levelType,
                value: level.value.toFixed(4)
            }));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ä–æ–≤–Ω—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            if (marketDirection) {
                if (level.type === 'support' && marketDirection.direction === 'DOWN') {
                    confidence += 8 * (level.strength || 1); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞–∂–Ω–µ–µ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–Ω–∏–∑
                } else if (level.type === 'resistance' && marketDirection.direction === 'UP') {
                    confidence -= 8 * (level.strength || 1); // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–µ–µ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–≤–µ—Ä—Ö
                }
            }
        }

        // 3. –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        // RSI
        if (indicators.rsi.overbought) {
            signals.push(getText('rsiOverbought', settings, {
                value: indicators.rsi.value.toFixed(2)
            }));
            confidence -= 15;
        } else if (indicators.rsi.oversold) {
            signals.push(getText('rsiOversold', settings, {
                value: indicators.rsi.value.toFixed(2)
            }));
            confidence += 15;
        }

        // MACD
        if (indicators.macd.histogram > 0 && indicators.macd.signal === 'BUY') {
            signals.push(getText('macdBuy', settings));
            confidence += 15;
        } else if (indicators.macd.histogram < 0 && indicators.macd.signal === 'SELL') {
            signals.push(getText('macdSell', settings));
            confidence -= 15;
        }

        // Bollinger Bands
        if (currentPrice < indicators.bollinger.lower * 1.01) {
            signals.push(getText('priceLowerBB', settings));
            confidence += 10;
        } else if (currentPrice > indicators.bollinger.upper * 0.99) {
            signals.push(getText('priceUpperBB', settings));
            confidence -= 10;
        }

        // Stochastic
        if (indicators.stochastic.oversold && indicators.stochastic.k > indicators.stochastic.d) {
            signals.push(getText('stochBuy', settings));
            confidence += 10;
        } else if (indicators.stochastic.overbought && indicators.stochastic.k < indicators.stochastic.d) {
            signals.push(getText('stochSell', settings));
            confidence -= 10;
        }

      // 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–≤–∏–∂–µ–Ω–∏–∏
      if (marketDirection && nextFibLevel) {
        if (marketDirection.direction === 'UP') {
            signals.push(getText('priceMovementUp', settings, {
                level: nextFibLevel.value.toFixed(4)
            }));
            confidence += 10; // –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        } else {
            signals.push(getText('priceMovementDown', settings, {
                level: nextFibLevel.value.toFixed(4)
            }));
            confidence -= 10; // –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        }
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –±–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 100
    confidence = Math.max(0, Math.min(100, confidence));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    let marketSituation;
    if (confidence > 70) {
        marketSituation = settings.language === 'uz' ? 
            'Ko\'rsatkichlar narxning o\'sishini ko\'rsatmoqda' : 
            '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç —Ü–µ–Ω—ã';
    } else if (confidence < 30) {
        marketSituation = settings.language === 'uz' ? 
            'Ko\'rsatkichlar narxning pasayishini ko\'rsatmoqda' : 
            '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã';
    } else if (confidence >= 50) {
        marketSituation = settings.language === 'uz' ? 
            'Ko\'rsatkichlar narxning sekin o\'sishi mumkinligini ko\'rsatmoqda' : 
            '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª–∞–±—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã';
    } else {
        marketSituation = settings.language === 'uz' ? 
            'Ko\'rsatkichlar narxning sekin pasayishi mumkinligini ko\'rsatmoqda' : 
            '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–ª–∞–±–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ –∫ —Å–∏–≥–Ω–∞–ª–∞–º
    signals.push(getText('marketSituation', settings, {
        situation: marketSituation
    }));

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    let message = getText('marketAnalysis', settings, {
        symbol: settings.symbol,
        interval: settings.interval,
        date: new Date().toLocaleString()
    }) + '\n\n';
    
    message += getText('currentPrice', settings, {
        price: currentPrice.toFixed(4)
    }) + '\n\n';

    // –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ)
    message += getText('fibonacciLevels', settings) + '\n';
    message += getText('reversePoint', settings, {value: fibLevels.point0.toFixed(4)}) + '\n';
    message += getText('fib236', settings, {value: fibLevels.level236.toFixed(4)}) + '\n';
    message += getText('fib382', settings, {value: fibLevels.level382.toFixed(4)}) + '\n';
    message += getText('fib500', settings, {value: fibLevels.level500.toFixed(4)}) + '\n';
    message += getText('fib618', settings, {value: fibLevels.level618.toFixed(4)}) + '\n';
    message += getText('fib786', settings, {value: fibLevels.level786.toFixed(4)}) + '\n';
    message += getText('endPoint', settings, {value: fibLevels.point100.toFixed(4)}) + '\n\n';

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (—Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ)
    message += getText('nearbyLevels', settings) + '\n';
    const nearbyLevels = supportResistanceLevels
        .filter(level => Math.abs(level.value - currentPrice) / currentPrice < 0.05)
        .sort((a, b) => Math.abs(a.value - currentPrice) - Math.abs(b.value - currentPrice))
        .slice(0, 3); // –¢–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–≤–Ω—è

    if (nearbyLevels.length > 0) {
        nearbyLevels.forEach(level => {
            const typeName = level.type === 'support' ? 
                getText('support', settings) : 
                getText('resistance', settings);
                
            message += `${typeName}: ${level.value.toFixed(4)} (${new Date(level.time).toLocaleTimeString()})\n`;
        });
    } else {
        message += getText('noLevels', settings) + '\n';
    }
    message += '\n';

    // –°–∏–≥–Ω–∞–ª—ã (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è)
    message += getText('signals', settings) + '\n';
    if (signals.length > 0) {
        // –ë–µ—Ä–µ–º –Ω–µ –±–æ–ª–µ–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        signals.slice(0, 5).forEach(signal => {
            message += `‚Ä¢ ${signal}\n`;
        });
    } else {
        message += getText('noSignals', settings) + '\n';
    }
    message += '\n';

    // –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    message += getText('finalConfidence', settings, {
        confidence: confidence.toFixed(0)
    }) + '\n';
    
    if (confidence > 70) {
        message += getText('strongBuy', settings) + '\n';
    } else if (confidence > 60) {
        message += getText('moderateBuy', settings) + '\n';
    } else if (confidence < 30) {
        message += getText('strongSell', settings) + '\n';
    } else if (confidence < 40) {
        message += getText('moderateSell', settings) + '\n';
    } else {
        message += getText('neutral', settings) + '\n';
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(chatId, message, getMainKeyboard(settings.language));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    lastAnalysisTime = Date.now();
} catch (error) {
    sendError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: ${error.message}`);
    const errorMsg = settings && settings.language === 'uz' ? 
        'Bozorni tahlil qilishda xatolik yuz berdi. Keyinroq qayta urinib ko\'ring.' :
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    
    bot.sendMessage(chatId, errorMsg, getMainKeyboard(settings ? settings.language : 'ru'));
}
}

function sendIndicatorsInfo(chatId) {
const settings = getUserSettings(chatId);
fetchMarketData(settings.symbol, settings.interval).then((data) => {
    if (!data || data.length === 0) {
        const errorMsg = settings.language === 'uz' ? 
            `${settings.symbol} uchun ma'lumotlar olinmadi. Sozlamalarni tekshiring yoki keyinroq qayta urinib ko'ring.` :
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${settings.symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        
        bot.sendMessage(chatId, errorMsg, getMainKeyboard(settings.language));
        return;
    }

    const indicators = calculateIndicators();
    const lastCandle = marketData[marketData.length - 1];
    const currentPrice = lastCandle.close;

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    const title = settings.language === 'uz' ? 
        `üìä Indikatorlar ko'rsatkichlari (${settings.symbol} ${settings.interval})` :
        `üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (${settings.symbol} ${settings.interval})`;
        
    const priceLabel = settings.language === 'uz' ? 
        `üìà Joriy narx: ${currentPrice.toFixed(4)}` :
        `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(4)}`;
        
    // RSI
    const rsiState = settings.language === 'uz' ? 
        (indicators.rsi.overbought ? 'HADDAN TASHQARI SOTIB OLINGAN' : 
         indicators.rsi.oversold ? 'HADDAN TASHQARI SOTILGAN' : 'NEYTRAL') :
        (indicators.rsi.overbought ? '–ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨' : 
         indicators.rsi.oversold ? '–ü–ï–†–ï–ü–†–û–î–ê–ù–û–°–¢–¨' : '–ù–ï–ô–¢–†–ê–õ–¨–ù–û');
    
    const rsiLabel = settings.language === 'uz' ? 
        `üìâ RSI (14): ${indicators.rsi.value.toFixed(2)}` :
        `üìâ RSI (14): ${indicators.rsi.value.toFixed(2)}`;
        
    const rsiStateLabel = settings.language === 'uz' ? 
        `Holat: ${rsiState}` :
        `–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${rsiState}`;
        
    // MACD
    const macdSignal = settings.language === 'uz' ? 
        (indicators.macd.signal === 'BUY' ? 'SOTIB OLISH' : 'SOTISH') :
        (indicators.macd.signal === 'BUY' ? '–ü–û–ö–£–ü–ö–ê' : '–ü–†–û–î–ê–ñ–ê');
        
    const macdLabel = settings.language === 'uz' ? 
        `üìä MACD (12/26/9)` :
        `üìä MACD (12/26/9)`;
        
    const macdHistogramLabel = settings.language === 'uz' ? 
        `Gistogramma: ${indicators.macd.histogram.toFixed(4)}` :
        `–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: ${indicators.macd.histogram.toFixed(4)}`;
        
    const macdSignalLabel = settings.language === 'uz' ? 
        `Signal: ${macdSignal}` :
        `–°–∏–≥–Ω–∞–ª: ${macdSignal}`;
        
    // Bollinger Bands
    const bbLabel = settings.language === 'uz' ? 
        `üìà Bollinger Bands (20,2)` :
        `üìà Bollinger Bands (20,2)`;
        
    const bbUpperLabel = settings.language === 'uz' ? 
        `Yuqori: ${indicators.bollinger.upper.toFixed(4)}` :
        `–í–µ—Ä—Ö–Ω—è—è: ${indicators.bollinger.upper.toFixed(4)}`;
        
    const bbMiddleLabel = settings.language === 'uz' ? 
        `O'rta: ${indicators.bollinger.middle.toFixed(4)}` :
        `–°—Ä–µ–¥–Ω—è—è: ${indicators.bollinger.middle.toFixed(4)}`;
        
    const bbLowerLabel = settings.language === 'uz' ? 
        `Quyi: ${indicators.bollinger.lower.toFixed(4)}` :
        `–ù–∏–∂–Ω—è—è: ${indicators.bollinger.lower.toFixed(4)}`;
        
    const bbPositionLabel = settings.language === 'uz' ? 
        `Narx pozitsiyasi: ${indicators.bollinger.pricePosition.toFixed(1)}%` :
        `–ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã: ${indicators.bollinger.pricePosition.toFixed(1)}%`;
        
    // Stochastic
    const stochasticState = settings.language === 'uz' ? 
        (indicators.stochastic.overbought ? 'HADDAN TASHQARI SOTIB OLINGAN' : 
         indicators.stochastic.oversold ? 'HADDAN TASHQARI SOTILGAN' : 'NEYTRAL') :
        (indicators.stochastic.overbought ? '–ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–¨' : 
         indicators.stochastic.oversold ? '–ü–ï–†–ï–ü–†–û–î–ê–ù–û–°–¢–¨' : '–ù–ï–ô–¢–†–ê–õ–¨–ù–û');
         
    const stochasticLabel = settings.language === 'uz' ? 
        `üìä Stochastic (14,3)` :
        `üìä Stochastic (14,3)`;
        
    const stochasticKLabel = settings.language === 'uz' ? 
        `K: ${indicators.stochastic.k.toFixed(2)}` :
        `K: ${indicators.stochastic.k.toFixed(2)}`;
        
    const stochasticDLabel = settings.language === 'uz' ? 
        `D: ${indicators.stochastic.d.toFixed(2)}` :
        `D: ${indicators.stochastic.d.toFixed(2)}`;
        
    const stochasticStateLabel = settings.language === 'uz' ? 
        `Holat: ${stochasticState}` :
        `–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${stochasticState}`;

    // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `${title}\n\n${priceLabel}\n\n`;
    message += `${rsiLabel}\n${rsiStateLabel}\n\n`;
    message += `${macdLabel}\n${macdHistogramLabel}\n${macdSignalLabel}\n\n`;
    message += `${bbLabel}\n${bbUpperLabel}\n${bbMiddleLabel}\n${bbLowerLabel}\n${bbPositionLabel}\n\n`;
    message += `${stochasticLabel}\n${stochasticKLabel}\n${stochasticDLabel}\n${stochasticStateLabel}`;

    bot.sendMessage(chatId, message, getMainKeyboard(settings.language));
});
}

function sendLevelsInfo(chatId) {
const settings = getUserSettings(chatId);
fetchMarketData(settings.symbol, settings.interval).then((data) => {
    if (!data || data.length === 0) {
        const errorMsg = settings.language === 'uz' ? 
            `${settings.symbol} uchun ma'lumotlar olinmadi. Sozlamalarni tekshiring yoki keyinroq qayta urinib ko'ring.` :
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${settings.symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        
        bot.sendMessage(chatId, errorMsg, getMainKeyboard(settings.language));
        return;
    }

    calculateFibonacciLevels();
    calculateSupportResistance();
    const lastCandle = marketData[marketData.length - 1];
    const currentPrice = lastCandle.close;

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    const title = settings.language === 'uz' ? 
        `üìä Bozor darajalari (${settings.symbol} ${settings.interval})` :
        `üìä –£—Ä–æ–≤–Ω–∏ —Ä—ã–Ω–∫–∞ (${settings.symbol} ${settings.interval})`;
        
    const priceLabel = settings.language === 'uz' ? 
        `üìà Joriy narx: ${currentPrice.toFixed(4)}` :
        `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(4)}`;
        
    // –§–∏–±–æ–Ω–∞—á—á–∏
    const fibTitle = settings.language === 'uz' ? 
        `üìâ Fibonacci darajalari:` :
        `üìâ –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏:`;
        
    // –ë–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
    const nearLevelsTitle = settings.language === 'uz' ? 
        `üìå Yaqin darajalar:` :
        `üìå –ë–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏:`;
        
    const noLevelsMsg = settings.language === 'uz' ? 
        `Yaqin ahamiyatli darajalar yo'q` :
        `–ù–µ—Ç –±–ª–∏–∑–∫–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö —É—Ä–æ–≤–Ω–µ–π`;

    // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `${title}\n\n${priceLabel}\n\n`;
    
    // –§–∏–±–æ–Ω–∞—á—á–∏
    message += `${fibTitle}\n`;
    message += `23.6%: ${fibLevels.level236.toFixed(4)}\n`;
    message += `38.2%: ${fibLevels.level382.toFixed(4)}\n`;
    message += `50.0%: ${fibLevels.level500.toFixed(4)}\n`;
    message += `61.8%: ${fibLevels.level618.toFixed(4)}\n\n`;

    // –ë–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    message += `${nearLevelsTitle}\n`;
    const nearbyLevels = supportResistanceLevels
        .filter(level => Math.abs(level.value - currentPrice) / currentPrice < 0.05)
        .sort((a, b) => Math.abs(a.value - currentPrice) - Math.abs(b.value - currentPrice))
        .slice(0, 4);

    if (nearbyLevels.length > 0) {
        nearbyLevels.forEach(level => {
            const distance = ((level.value - currentPrice) / currentPrice * 100).toFixed(2);
            const levelType = level.type === 'support' ? 
                (settings.language === 'uz' ? 'üîµ Qo\'llab-quvvatlash' : 'üîµ –ü–æ–¥–¥–µ—Ä–∂–∫–∞') : 
                (settings.language === 'uz' ? 'üî¥ Qarshilik' : 'üî¥ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ');
                
            message += `${levelType}: ${level.value.toFixed(4)} (${distance}%)\n`;
        });
    } else {
        message += `${noLevelsMsg}\n`;
    }

    bot.sendMessage(chatId, message, getMainKeyboard(settings.language));
});
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
function sendError(errorMessage) {
console.error(`[ERROR] ${new Date().toISOString()}: ${errorMessage}`);
bot.sendMessage(CHAT_ID, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ${errorMessage}`)
    .catch(err => console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${err.message}`));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
const chatId = msg.chat.id;

const welcomeMessage = {
    ru: 'üîÆ Forex –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä.',
    uz: 'üîÆ Forex Analitik Bot ishga tushirildi!\n\nValyuta juftliklarini tahlil qilish uchun quyidagi tugmalardan foydalaning.'
};

const settings = getUserSettings(chatId);
bot.sendMessage(chatId, welcomeMessage[settings.language] || welcomeMessage.ru, getMainKeyboard(settings.language));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.on('message', (msg) => {
const chatId = msg.chat.id;
const text = msg.text;
const settings = getUserSettings(chatId);

if (!text) return;

// –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
if (text === 'üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞' || text === 'üìä Bozor tahlili') {
    sendMarketAnalysis(chatId);
}
else if (text === 'üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã' || text === 'üìà Indikatorlar') {
    sendIndicatorsInfo(chatId);
}
else if (text === 'üìâ –£—Ä–æ–≤–Ω–∏' || text === 'üìâ Darajalar') {
    sendLevelsInfo(chatId);
}
else if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' || text === '‚öôÔ∏è Sozlamalar') {
    bot.sendMessage(
        chatId, 
        settings.language === 'uz' ? 'Sozlash uchun parametrni tanlang:' : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', 
        getSettingsKeyboard(settings.language)
    );
}
else if (text === '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É' || text === 'Juftlikni o\'zgartirish') {
    bot.sendMessage(
        chatId, 
        settings.language === 'uz' ? 'Valyuta juftligini tanlang:' : '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:', 
        getSymbolKeyboard(settings.language)
    );
}
else if (text === '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º' || text === 'Vaqt oralig\'ini o\'zgartirish') {
    bot.sendMessage(
        chatId, 
        settings.language === 'uz' ? 'Vaqt oralig\'ini tanlang:' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:', 
        getIntervalKeyboard(settings.language)
    );
}
else if (text === '–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫' || text === 'Tilni o\'zgartirish') {
    bot.sendMessage(
        chatId, 
        '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:', 
        getLanguageKeyboard()
    );
}
else if (text === '5min' || text === '15min' || text === '1h' || text === '4h' || text === '1day') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    getUserSettings(chatId).interval = text;
    const confirmMsg = settings.language === 'uz' ? 
        `Vaqt oralig'i ${text} ga o'zgartirildi. Yangi tahlillar ushbu intervalni ishlatadi.` :
        `–¢–∞–π–º—Ñ—Ä–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${text}. –ù–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª.`;
        
    bot.sendMessage(chatId, confirmMsg, getMainKeyboard(settings.language));
}
else if (
    text === 'EUR/USD' || 
    text === 'GBP/USD' || 
    text === 'USD/JPY' || 
    text === 'GBP/JPY' || 
    text === 'AUD/USD' || 
    text === 'USD/CAD'
) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É
    getUserSettings(chatId).symbol = text;
    const confirmMsg = settings.language === 'uz' ? 
        `Valyuta jufti ${text} ga o'zgartirildi. Yangi tahlillar ushbu juftni ishlatadi.` :
        `–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${text}. –ù–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø–∞—Ä—É.`;
        
    bot.sendMessage(chatId, confirmMsg, getMainKeyboard(settings.language));
}
else if (text === '–†—É—Å—Å–∫–∏–π') {
    // –ú–µ–Ω—è–µ–º —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    getUserSettings(chatId).language = 'ru';
    bot.sendMessage(chatId, '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π', getMainKeyboard('ru'));
}
else if (text === 'O\'zbekcha') {
    // –ú–µ–Ω—è–µ–º —è–∑—ã–∫ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π
    getUserSettings(chatId).language = 'uz';
    bot.sendMessage(chatId, 'Til o\'zbekchaga o\'zgartirildi', getMainKeyboard('uz'));
}
else if (text === '–ù–∞–∑–∞–¥' || text === 'Orqaga' || text === '–ù–∞–∑–∞–¥ / Orqaga') {
    bot.sendMessage(
        chatId, 
        settings.language === 'uz' ? 'Asosiy menyu' : '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 
        getMainKeyboard(settings.language)
    );
}
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–Ω–∞–ª–∏–∑–∞
setInterval(() => {
analyzeMarket();
}, 15 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
function analyzeMarket() {
if (Date.now() - lastAnalysisTime < 15 * 60 * 1000) return;
lastAnalysisTime = Date.now();

// –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
const settings = getUserSettings(CHAT_ID);

fetchMarketData(settings.symbol, settings.interval)
    .then((data) => {
        if (!data || data.length === 0) {
            sendError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (${settings.symbol})`);
            return;
        }

        calculateFibonacciLevels();
        calculateSupportResistance();

        sendMarketAnalysis(CHAT_ID);
    })
    .catch(error => sendError(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`));
}

console.log('Forex –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');