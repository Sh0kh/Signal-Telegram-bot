require('dotenv').config();
const { Telegraf } = require('telegraf');
const fetch = (...args) =>
    import('node-fetch').then(({ default: fetch }) => fetch(...args));

const bot = new Telegraf(process.env.BOT_TOKEN);
const CHAT_ID = process.env.CHAT_ID;
const BINANCE_BASE_URL = 'https://api.binance.com/api/v3';

// –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const SYMBOLS = [
    { pair: 'BTCUSDT', name: 'Bitcoin/USDT' },
    { pair: 'ETHUSDT', name: 'Ethereum/USDT' },
    { pair: 'BNBUSDT', name: 'BNB/USDT' },
    { pair: 'SOLUSDT', name: 'Solana/USDT' }
];
const INTERVAL = '15m'; // Binance –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M
const AUTO_CHECK_INTERVAL = 5 * 60 * 1000;

let nextAnalysisTime = Date.now() + 10000;
let autoAnalysisTimer = null;

// –£—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
const CONFIDENCE_LEVELS = {
    'VERY_HIGH': { 
        emoji: 'üü¢', 
        name: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
        description: '–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤'
    },
    'HIGH': { 
        emoji: 'üü©', 
        name: '–í—ã—Å–æ–∫–∏–π',
        description: '–•–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏'
    },
    'MEDIUM': { 
        emoji: 'üü®', 
        name: '–°—Ä–µ–¥–Ω–∏–π',
        description: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏'
    },
    'LOW': { 
        emoji: 'üüß', 
        name: '–ù–∏–∑–∫–∏–π',
        description: '–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
    },
    'VERY_LOW': { 
        emoji: 'üü•', 
        name: '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π',
        description: '–û—á–µ–Ω—å —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è'
    }
};

function formatTimeRemaining(targetTime) {
    const now = Date.now();
    const milliseconds = Math.max(0, targetTime - now);

    if (milliseconds < 1000) return "–º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã";

    const seconds = Math.floor(milliseconds / 1000) % 60;
    const minutes = Math.floor(milliseconds / (1000 * 60));

    let minutesText = `${minutes} –º–∏–Ω—É—Ç`;
    let secondsText = `${seconds} —Å–µ–∫—É–Ω–¥`;

    if (minutes === 1 || minutes % 10 === 1 && minutes !== 11) minutesText = `${minutes} –º–∏–Ω—É—Ç—É`;
    else if ((minutes >= 2 && minutes <= 4) || (minutes % 10 >= 2 && minutes % 10 <= 4 && (minutes < 12 || minutes > 14))) minutesText = `${minutes} –º–∏–Ω—É—Ç—ã`;

    if (seconds === 1 || seconds % 10 === 1 && seconds !== 11) secondsText = `${seconds} —Å–µ–∫—É–Ω–¥—É`;
    else if ((seconds >= 2 && seconds <= 4) || (seconds % 10 >= 2 && seconds % 10 <= 4 && (seconds < 12 || seconds > 14))) secondsText = `${seconds} —Å–µ–∫—É–Ω–¥—ã`;

    if (minutes === 0) return secondsText;
    else if (seconds === 0) return minutesText;
    else return `${minutesText} ${secondsText}`;
}

async function fetchData(url) {
    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();

        if (data.code && data.msg) {
            throw new Error(`API error: ${data.msg}`);
        }

        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ fetch:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
async function getKlines(symbol, interval, limit = 100) {
    try {
        const url = `${BINANCE_BASE_URL}/klines?symbol=${symbol}&interval=${interval}&limit=${limit}`;
        const data = await fetchData(url);
        
        return data.map(k => ({
            openTime: k[0],
            open: parseFloat(k[1]),
            high: parseFloat(k[2]),
            low: parseFloat(k[3]),
            close: parseFloat(k[4]),
            volume: parseFloat(k[5]),
            closeTime: k[6]
        }));
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Klines –¥–ª—è ${symbol}:`, error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SMA
function calculateSMA(data, period) {
    const results = [];
    for (let i = period - 1; i < data.length; i++) {
        const sum = data.slice(i - period + 1, i + 1).reduce((total, price) => total + price, 0);
        results.push(sum / period);
    }
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA
function calculateEMA(data, period) {
    const k = 2 / (period + 1);
    const emaResults = [data[0]];
    
    for (let i = 1; i < data.length; i++) {
        const ema = (data[i] * k) + (emaResults[i - 1] * (1 - k));
        emaResults.push(ema);
    }
    
    return emaResults;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI
function calculateRSI(data, period) {
    const changes = [];
    for (let i = 1; i < data.length; i++) {
        changes.push(data[i] - data[i - 1]);
    }
    
    const results = [];
    for (let i = period; i < changes.length + 1; i++) {
        const slice = changes.slice(i - period, i);
        const gains = slice.filter(change => change > 0).reduce((total, change) => total + change, 0) / period;
        const losses = slice.filter(change => change < 0).reduce((total, change) => total + Math.abs(change), 0) / period;
        
        const rs = gains / (losses === 0 ? 0.01 : losses);
        const rsi = 100 - (100 / (1 + rs));
        results.push(rsi);
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ MACD
function calculateMACD(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {
    const fastEMA = calculateEMA(data, fastPeriod);
    const slowEMA = calculateEMA(data, slowPeriod);
    
    // –û–±—Ä–µ–∑–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ EMA, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –¥–ª–∏–Ω–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö EMA
    const macdLine = [];
    for (let i = 0; i < slowEMA.length; i++) {
        const fastEMAIndex = i + (fastEMA.length - slowEMA.length);
        if (fastEMAIndex >= 0) {
            macdLine.push(fastEMA[fastEMAIndex] - slowEMA[i]);
        }
    }
    
    const signalLine = calculateEMA(macdLine, signalPeriod);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = [];
    for (let i = 0; i < signalLine.length; i++) {
        const macdIndex = i + (macdLine.length - signalLine.length);
        const histogram = macdLine[macdIndex] - signalLine[i];
        
        result.push({
            macd: macdLine[macdIndex],
            signal: signalLine[i],
            histogram: histogram
        });
    }
    
    return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR
function calculateATR(klines, period = 14) {
    const trueRanges = [];
    
    for (let i = 1; i < klines.length; i++) {
        const high = klines[i].high;
        const low = klines[i].low;
        const prevClose = klines[i - 1].close;
        
        const tr1 = high - low;
        const tr2 = Math.abs(high - prevClose);
        const tr3 = Math.abs(low - prevClose);
        
        const tr = Math.max(tr1, tr2, tr3);
        trueRanges.push(tr);
    }
    
    // –†–∞—Å—á–µ—Ç ATR –∫–∞–∫ —Å—Ä–µ–¥–Ω–∏—Ö –∏—Å—Ç–∏–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    const atr = [];
    if (trueRanges.length >= period) {
        let sum = 0;
        for (let i = 0; i < period; i++) {
            sum += trueRanges[i];
        }
        atr.push(sum / period);
        
        for (let i = period; i < trueRanges.length; i++) {
            atr.push((atr[atr.length - 1] * (period - 1) + trueRanges[i]) / period);
        }
    }
    
    return atr;
}

async function getSignal(symbol) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance
        const klines = await getKlines(symbol.pair, INTERVAL, 100);
        
        if (!klines || klines.length < 50) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closePrices = klines.map(k => k.close);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const sma7 = calculateSMA(closePrices, 7);
        const sma25 = calculateSMA(closePrices, 25);
        const ema50 = calculateEMA(closePrices, 50);
        const rsiData = calculateRSI(closePrices, 14);
        const macdData = calculateMACD(closePrices);
        const atrData = calculateATR(klines, 14);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const latestPrice = closePrices[closePrices.length - 1];
        const prevPrice = closePrices[closePrices.length - 2];
        const latestSMA7 = sma7[sma7.length - 1];
        const latestSMA25 = sma25[sma25.length - 1];
        const latestEMA50 = ema50[ema50.length - 1];
        const latestRSI = rsiData[rsiData.length - 1];
        const latestMACD = macdData[macdData.length - 1];
        const prevMACD = macdData[macdData.length - 2];
        const latestATR = atrData[atrData.length - 1];
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ SL/TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        const slDistance = latestATR * 1.5;
        const tpDistance = latestATR * 2.5;
        const slBuy = (latestPrice - slDistance).toFixed(5);
        const tpBuy = (latestPrice + tpDistance).toFixed(5);
        const slSell = (latestPrice + slDistance).toFixed(5);
        const tpSell = (latestPrice - tpDistance).toFixed(5);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        const trendUp = latestSMA7 > latestSMA25 && latestSMA25 > latestEMA50;
        const trendDown = latestSMA7 < latestSMA25 && latestSMA25 < latestEMA50;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ —É—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è
        let signal = 'HOLD';
        let confidence = 'VERY_LOW';
        let reasons = [];
        let hasActionSignal = false;

        // –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if (trendUp && latestRSI < 60 && latestMACD.macd > latestMACD.signal) {
            signal = 'BUY';
            confidence = 'HIGH';
            reasons.push('–¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö (SMA7 > SMA25 > EMA50)');
            reasons.push('RSI –Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω (<60)');
            reasons.push('MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏');
            hasActionSignal = true;
            
            // –ü–æ–≤—ã—à–∞–µ–º –¥–æ–≤–µ—Ä–∏–µ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
            if (latestRSI > 30 && latestRSI < 50) {
                confidence = 'VERY_HIGH';
                reasons.push('RSI –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ (30-50)');
            }
            
            if (latestMACD.histogram > 0 && latestMACD.histogram > prevMACD.histogram) {
                reasons.push('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —Ä–∞—Å—Ç–µ—Ç');
            }
        }
        // –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        else if (trendDown && latestRSI > 40 && latestMACD.macd < latestMACD.signal) {
            signal = 'SELL';
            confidence = 'HIGH';
            reasons.push('–¢—Ä–µ–Ω–¥ –≤–Ω–∏–∑ (SMA7 < SMA25 < EMA50)');
            reasons.push('RSI –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (>40)');
            reasons.push('MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏');
            hasActionSignal = true;
            
            // –ü–æ–≤—ã—à–∞–µ–º –¥–æ–≤–µ—Ä–∏–µ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
            if (latestRSI > 50 && latestRSI < 70) {
                confidence = 'VERY_HIGH';
                reasons.push('RSI –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ (50-70)');
            }
            
            if (latestMACD.histogram < 0 && latestMACD.histogram < prevMACD.histogram) {
                reasons.push('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ MACD —Å–Ω–∏–∂–∞–µ—Ç—Å—è');
            }
        }
        // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –º–µ–Ω—å—à–∏–º –¥–æ–≤–µ—Ä–∏–µ–º
        else if (latestSMA7 > latestSMA25 && latestRSI < 70 && latestMACD.macd > 0) {
            signal = 'BUY';
            confidence = 'MEDIUM';
            reasons.push('–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö (SMA7 > SMA25)');
            reasons.push('RSI –Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω (<70)');
            reasons.push('MACD –≤—ã—à–µ –Ω—É–ª—è');
            hasActionSignal = true;
        }
        else if (latestSMA7 < latestSMA25 && latestRSI > 30 && latestMACD.macd < 0) {
            signal = 'SELL';
            confidence = 'MEDIUM';
            reasons.push('–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑ (SMA7 < SMA25)');
            reasons.push('RSI –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (>30)');
            reasons.push('MACD –Ω–∏–∂–µ –Ω—É–ª—è');
            hasActionSignal = true;
        }
        // –û—á–µ–Ω—å —Å–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        else if (latestPrice > latestSMA7 && latestSMA7 > latestSMA25 && latestRSI < 65) {
            signal = 'BUY';
            confidence = 'LOW';
            reasons.push('–¶–µ–Ω–∞ –≤—ã—à–µ SMA7 –∏ SMA25');
            reasons.push('RSI —É–º–µ—Ä–µ–Ω–Ω—ã–π (<65)');
            hasActionSignal = true;
        }
        else if (latestPrice < latestSMA7 && latestSMA7 < latestSMA25 && latestRSI > 35) {
            signal = 'SELL';
            confidence = 'LOW';
            reasons.push('–¶–µ–Ω–∞ –Ω–∏–∂–µ SMA7 –∏ SMA25');
            reasons.push('RSI —É–º–µ—Ä–µ–Ω–Ω—ã–π (>35)');
            hasActionSignal = true;
        }

        // –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        const signalEmoji = {
            'BUY': 'üîº',
            'SELL': 'üîΩ',
            'HOLD': '‚ÜîÔ∏è'
        }[signal];

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–≤–Ω–µ –¥–æ–≤–µ—Ä–∏—è
        const confidenceData = CONFIDENCE_LEVELS[confidence] || CONFIDENCE_LEVELS.VERY_LOW;

        return {
            symbol: symbol.name,
            pair: symbol.pair,
            latestPrice,
            sma7: latestSMA7,
            sma25: latestSMA25,
            ema50: latestEMA50,
            rsi: latestRSI,
            macd: latestMACD.macd,
            macdSignal: latestMACD.signal,
            macdHist: latestMACD.histogram,
            atr: latestATR,
            signal: `${signalEmoji} ${signal}`,
            confidence: confidenceData,
            reasons,
            tp: signal === 'BUY' ? tpBuy : tpSell,
            sl: signal === 'BUY' ? slBuy : slSell,
            hasActionSignal,
            trend: trendUp ? '–í–æ—Å—Ö–æ–¥—è—â–∏–π' : trendDown ? '–ù–∏—Å—Ö–æ–¥—è—â–∏–π' : '–ë–æ–∫–æ–≤–æ–π'
        };
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${symbol.name}:`, error.message);
        return {
            symbol: symbol.name,
            error: error.message
        };
    }
}

async function sendMessage(ctx, text) {
    try {
        if (ctx) {
            await ctx.replyWithMarkdown(text);
        } else if (CHAT_ID) {
            try {
                await bot.telegram.sendMessage(CHAT_ID, text, { parse_mode: 'Markdown' });
            } catch (error) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ CHAT_ID: ${error.message}`);
                // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
    }
}

async function sendSignals(ctx = null, isAutoCheck = false) {
    try {
        if (!isAutoCheck) {
            await sendMessage(ctx, 'üîç –ù–∞—á–∏–Ω–∞—é —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞...');
        }

        let hasAnySignal = false;
        const results = [];

        for (const symbol of SYMBOLS) {
            const result = await getSignal(symbol);

            if (result.error) {
                if (!isAutoCheck) {
                    await sendMessage(ctx, `‚ùå ${symbol.name}: ${result.error}`);
                }
                continue;
            }

            results.push(result);
            if (result.hasActionSignal) {
                hasAnySignal = true;
            }
        }

        updateNextAnalysisTime();

        // –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
        if (isAutoCheck && !hasAnySignal && results.length > 0) {
            const timeRemaining = formatTimeRemaining(nextAnalysisTime);
            await sendMessage(null, `‚ö†Ô∏è *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤*\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: ${results.length}\n–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}\n\n‚è± –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑: ${timeRemaining}`);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for (const result of results) {
            if (isAutoCheck && !result.hasActionSignal) continue;

            const timeRemaining = formatTimeRemaining(nextAnalysisTime);
            const confidence = result.confidence;

            const message = `
${isAutoCheck ? 'üîÑ *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó*' : 'üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê*'}
${confidence.emoji} *${result.symbol} (${result.pair})*
üìå *–°–∏–≥–Ω–∞–ª*: ${result.signal} (${confidence.name})
${confidence.emoji} *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å*: ${confidence.description}

üí∞ *–¶–µ–Ω–∞*: ${result.latestPrice}
üìà *–¢—Ä–µ–Ω–¥*: ${result.trend}
üìä *–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã*:
- SMA(7): ${result.sma7.toFixed(5)}
- SMA(25): ${result.sma25.toFixed(5)}
- EMA(50): ${result.ema50.toFixed(5)}
- RSI(14): ${result.rsi.toFixed(2)}
- MACD: ${result.macd.toFixed(5)} (—Å–∏–≥–Ω–∞–ª: ${result.macdSignal.toFixed(5)})
- ATR(14): ${result.atr.toFixed(5)} (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)

üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:
- TP: ${result.tp}
- SL: ${result.sl}

üìù *–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ*:
${result.reasons.map(r => `‚Ä¢ ${r}`).join('\n')}

‚è∞ *–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞*: ${new Date().toLocaleTimeString()}
‚è± *–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑*: ${timeRemaining}
            `.trim();

            await sendMessage(isAutoCheck ? null : ctx, message);
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        if (!isAutoCheck) {
            const timeRemaining = formatTimeRemaining(nextAnalysisTime);
            await sendMessage(ctx, `‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\n\n‚è± –°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑: ${timeRemaining}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ sendSignals:', error);
        const timeRemaining = formatTimeRemaining(nextAnalysisTime);
        const errorMessage = `‚ùó –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}\n\n‚è± –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑: ${timeRemaining}`;
        
        await sendMessage(isAutoCheck ? null : ctx, errorMessage);
        updateNextAnalysisTime();
    }
}

function updateNextAnalysisTime() {
    nextAnalysisTime = Date.now() + AUTO_CHECK_INTERVAL;
    console.log(`–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${new Date(nextAnalysisTime).toLocaleTimeString()}`);

    if (autoAnalysisTimer) clearTimeout(autoAnalysisTimer);
    autoAnalysisTimer = setTimeout(runAutoAnalysis, AUTO_CHECK_INTERVAL);
}

async function showStatus(ctx) {
    const timeRemaining = formatTimeRemaining(nextAnalysisTime);
    const nextTimeString = new Date(nextAnalysisTime).toLocaleTimeString();

    await sendMessage(ctx, `üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n\n‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚è± –°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑: ${timeRemaining}\nüïí –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${nextTimeString}\nüìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: ${SYMBOLS.map(s => s.name).join(', ')}`);
}

async function runAnalysisNow(ctx) {
    if (autoAnalysisTimer) clearTimeout(autoAnalysisTimer);
    await sendMessage(ctx, '‚ö° –ó–∞–ø—É—Å–∫–∞—é —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...');
    await sendSignals(ctx, false);
}

const runAutoAnalysis = async () => {
    try {
        console.log('–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
        await sendSignals(null, true);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
        updateNextAnalysisTime();
    }
};

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start(ctx => ctx.replyWithMarkdown(
    `üíé *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç* üíé\n\nüìà *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã*: ${SYMBOLS.map(s => s.name).join(', ')}\n‚è± *–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞*: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n\n*–£—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è*:\n${Object.values(CONFIDENCE_LEVELS).map(l => `${l.emoji} ${l.name}: ${l.description}`).join('\n')}`,
    {
        reply_markup: {
            keyboard: [
                [{ text: 'üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã' }, { text: 'üìä –°—Ç–∞—Ç—É—Å' }],
                [{ text: '‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ–π—á–∞—Å' }],
                [{ text: '‚ÑπÔ∏è –û –±–æ—Ç–µ' }]
            ], 
            resize_keyboard: true
        }
    }
));

bot.hears('üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã', ctx => sendSignals(ctx, false));
bot.hears('üìä –°—Ç–∞—Ç—É—Å', ctx => showStatus(ctx));
bot.hears('‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ–π—á–∞—Å', ctx => runAnalysisNow(ctx));
bot.hears('‚ÑπÔ∏è –û –±–æ—Ç–µ', ctx => ctx.replyWithMarkdown(
    `ü§ñ *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç*\n\n` +
    `–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:\n` +
    `- –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (SMA, EMA)\n` +
    `- –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã (RSI, MACD)\n` +
    `- –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)\n\n` +
    `–°–∏–≥–Ω–∞–ª—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è —É—Ä–æ–≤–Ω—è–º–∏ –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –ª—É—á—à–µ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤.\n\n` +
    `–î–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Binance API.`
));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Telegram
bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${ctx.updateType}:`, err);
});

async function startBot() {
    try {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
        if (!process.env.BOT_TOKEN) {
            throw new Error('–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Binance API...');
        const testUrl = `${BINANCE_BASE_URL}/ping`;
        await fetchData(testUrl);
        console.log('Binance API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

        await bot.launch();
        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        nextAnalysisTime = Date.now() + 10000;
        autoAnalysisTimer = setTimeout(runAutoAnalysis, 10000);
        
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ CHAT_ID –∑–∞–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (CHAT_ID) {
            try {
                await bot.telegram.sendMessage(CHAT_ID, 
                    'üíé *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n' +
                    '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n' +
                    `üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: ${SYMBOLS.map(s => s.name).join(', ')}\n\n` +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.',
                    { parse_mode: 'Markdown' });
                console.log(`–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${CHAT_ID}`);
            } catch (error) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ CHAT_ID: ${error.message}`);
                console.log('–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.');
                console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å CHAT_ID –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.');
            }
        } else {
            console.log('CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.');
            console.log('–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    } catch (error) {
        console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
        process.exit(1);
    }
}

startBot();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    if (autoAnalysisTimer) clearTimeout(autoAnalysisTimer);
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    if (autoAnalysisTimer) clearTimeout(autoAnalysisTimer);
    bot.stop('SIGTERM');
});